using System;
using NaughtyAttributes;
using UnityEngine;
using UnityEngine.Events;
using UnityEngine.Serialization;

namespace Readymade.Machinery.Acting
{
    /// <summary>
    /// Wave function flank on which a trigger may fire. 
    /// </summary>
    public enum TriggerMode
    {
        /// <summary>
        /// The wave function is rising.
        /// </summary>
        Rising,

        /// <summary>
        /// The wave function is falling.
        /// </summary>
        Falling,

        /// <summary>
        /// The wave function is rising or falling.
        /// </summary>
        Both
    }

    /// <summary>
    /// Defines an event pattern based on a linear decay function that, when fired at the specified <see cref="PerformanceGenerator.Value"/>, posts a <see cref="IPerformance{IActor}"/>.
    /// </summary>
    [Serializable]
    public class ThresholdEvent
    {
        [SerializeField]
        [Tooltip("A descriptive name for this event.")]
        public string name;
        
        /// <summary>
        /// Defines whether the event is triggered on a positive or negative delta.
        /// </summary>
        [Tooltip("Defines whether the event is triggered on a positive or negative delta.")]
        [SerializeField]
        private TriggerMode triggerMode = TriggerMode.Falling;

        /// The threshold which has to be crossed in order to trigger this event.
        [SerializeField]
        [Range(0f, 1f)]
        [Tooltip("The threshold which has to be crossed in order to trigger this event.")]
        private float triggerThreshold;

        /// The template used to post the activity.
        [SerializeField]
        [Tooltip("The template used to post the activity.")]
        private SoPerformanceTemplate template;

        [SerializeField] private bool requirePosition = true;

        [Tooltip("The prop required to complete the performance generated by this event.")]
        [SerializeField]
        private PropCount requireProp;

        [Tooltip("The actor that is allowed to complete the performance generated by this event.")]
        [SerializeField]
        private Actor requireActor;

        [Tooltip("The actor roles that is allowed to complete the performance generated by this event.")]
        [SerializeField]
        [EnumFlags]
        private RoleMask requireRole;

        /// Priority of the <see cref="IPerformance{IActor}"/> that will be posted.
        [SerializeField]
        [Tooltip("Priority of the performance that will be posted.")]
        private int priority = 0;

        /// Duration of the <see cref="IPerformance{IActor}"/> that will be posted.
        [BoxGroup("Performance")]
        [AllowNesting]
        [SerializeField]
        [Min(0f)]
        [Tooltip("Duration of the performance that will be posted.")]
        private float duration = 1f;

        [BoxGroup("Performance")]
        [AllowNesting]
        [SerializeField]
        [Min(0f)]
        [Tooltip("The interval at which the generated performance will be ticked.")]
        private float tickInterval = 0.25f;

        [BoxGroup("Performance")]
        [AllowNesting]
        [SerializeField]
        [Tooltip("The value delta applied to the target at each tick.")]
        private float _tickIncrement = 0.1f;

        [SerializeField] internal UnityEvent onFailed;
        [SerializeField] internal UnityEvent onCompleted;
        [SerializeField] internal UnityEvent onStarted;
        [SerializeField] internal UnityEvent onTick;

        /// <summary>
        /// The threshold which has to be crossed in order to trigger this event.
        /// </summary>
        public float TriggerThreshold => triggerThreshold;

        /// <summary>
        /// Defines whether the event is triggered on a positive or negative delta.
        /// </summary>
        public TriggerMode TriggerMode => triggerMode;

        /// <summary>
        /// The template used to post the activity.
        /// </summary>
        public SoPerformanceTemplate Template => template;

        /// <summary>
        /// Duration of the <see cref="IPerformance{IActor}"/> that will be posted.
        /// </summary>
        public float Duration => duration;

        /// <summary>
        /// Priority of the <see cref="IPerformance{IActor}"/> that will be posted.
        /// </summary>
        public int Priority => priority;

        /// <summary>
        /// The increment applied to the target in each tick of the generated performance.
        /// </summary>
        public float TickIncrement => _tickIncrement;

        /// <summary>
        /// The interval between ticks on the generated performance.
        /// </summary>
        public float TickInterval => tickInterval;

        /// <summary>
        /// A descriptive name for this event.
        /// </summary>
        public string DisplayName => name;

        /// <summary>
        /// The <see cref="IProp"/> required to complete the generated performance.
        /// </summary>
        public PropCount RequireProp => requireProp;

        /// <summary>
        /// The <see cref="IActor"/> allowed to claim and complete the generated performance.
        /// </summary>
        public IActor RequireActor => requireActor;

        /// <summary>
        /// The position of any performing <see cref="IActor"/>, required to complete the generated performance.
        /// </summary>
        public bool RequirePosition => requirePosition;

        /// <summary>
        /// The roles allowed to claim and complete the performance.
        /// </summary>
        public RoleMask RequireRole => requireRole;

        public virtual int GetKey()
        {
            return GetHashCode();
        }
    }
}